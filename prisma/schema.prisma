generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id String @id @default(cuid())

  email    String  @unique
  password String?
  name     String  @default("Не указано")
  picture  String  @default("/uploads/no-user-image.png")

  stores    Store[]
  favorites Product[]
  reviews   Review[]
  orders    Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Store {
  id String @id @default(cuid())

  title       String
  description String?

  products   Product[]
  categories Category[]
  colors     Color[]
  reviews    Review[]
  orderItems OrderItem[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("store")
}

model Product {
  id String @id @default(cuid())

  title       String
  description String
  price       Int
  images      String[]

  reviews    Review[]
  orderItems OrderItem[]

  store      Store?    @relation(fields: [storeId], references: [id])
  storeId    String?   @map("store_id")
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")
  color      Color?    @relation(fields: [colorId], references: [id])
  colorId    String?   @map("color_id")
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product")
}

model Category {
  id String @id @default(cuid())

  title       String
  description String

  products Product[]

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("category")
}

model Color {
  id String @id @default(cuid())

  name  String
  value String

  products Product[]

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("color")
}

model Review {
  id String @id @default(cuid())

  text   String
  rating Int

  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")
  store     Store?   @relation(fields: [storeId], references: [id])
  storeId   String?  @map("store_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("review")
}

model Order {
  id String @id @default(cuid())

  status EnumOrderStatus @default(PENDING)
  total  Int

  items OrderItem[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order")
}

model OrderItem {
  id String @id @default(cuid())

  quantity Int
  price    Int

  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?  @map("order_id")
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")
  store     Store?   @relation(fields: [storeId], references: [id])
  storeId   String?  @map("store_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
}
